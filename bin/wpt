#!/usr/bin/env node


var args = require('argsparser').parse();
var fs = require('fs');
var path = require('path');
var WPT = require('../');
var winston = require("winston");
var str = require("str.js");
var Splunk = require('../lib/splunk').Splunk;
var cwd = process.cwd();

var config = (function(file) {
  var json = fs.readFileSync(file);
  return JSON.parse(json);
}(args['--config'] || path.join(cwd, 'config.json')));


var transports = [
  //new (winston.transports.Console)()
];

if (config.transports && config.transports.splunk) {
  transports.push(new Splunk(config.transports.splunk));
}

var infoLog = new (winston.Logger)({
  transports: [
    new (winston.transports.Console)()
  ]
});

var dataLog = new (winston.Logger)({
  transports: transports 
});

var wpt = new WPT(config.apikey);

var logHarFile = function(testId, url) {
  if (config.logHarFile === true) {
    wpt.getHARFile(testId, function(json) {
      for (var i = 0, c = json.log.entries.length; i < c; i++) {
        var entry = json.log.entries[i];
        dataLog.info("har", { testId: testId, testUrl: url, url: entry.request.url, size: entry.response.bodySize, time: entry.time, status: entry.response.status });
      }
    });
  }
};

wpt.on("startTest", function(options, data) {
  infoLog.info(str.format("Test Started: {url} {id}", { url: options.url, id: data.data.testId }));
});

wpt.on("endTest", function(testResult) {
  infoLog.info(str.format("Test Complete: {url} {id} {summary}", { url: testResult.testUrl, id: testResult.testId, summary: testResult.summary }));
  try {

    if (testResult.run.firstView.results.docTime != 0) {
      dataLog.info("firstView", {
        testId: testResult.testId,
        summary: testResult.summary,
        url: testResult.testUrl,
        completed: new Date(testResult.completed).getTime(),
        results: testResult.run.firstView.results,
        images: testResult.run.firstView.images
      });
    } else {
      dataLog.error("timeout", {
        testId: testResult.testId,
        summary: testResult.summary,
        url: testResult.testUrl
      });
    }
  } catch(e) {
    console.log(e);
    infoLog.error(e);
  }
  try {  
    if (testResult.run.repeatView.results.docTime != 0) {
      dataLog.info("repeatView", {
        testId: testResult.testId,
        summary: testResult.summary,
        url: testResult.testUrl,
        completed: new Date(testResult.completed).getTime(),
        results: testResult.run.repeatView.results,
        images: testResult.run.repeatView.images
      });
    } else {
      dataLog.error("timeout", {
        testId: testResult.testId,
        summary: testResult.summary,
        url: testResult.testUrl
      });
    }
  } catch(e) {
    console.log(e);
    infoLog.error(e);
  }
  logHarFile(testResult.testId, testResult.testUrl);
});

infoLog.info("Starting batch, this may take awhile");
var runBatch = function() {
  wpt.runBatch(config.urls);
};
runBatch();
//wpt.getResults("110614_6A_TW3Q");
//logHarFile("110614_6A_TW3Q");
